#!/usr/bin/env ruby

require_relative "./esf_scripts"
require "paint"

class ListResearch < EsfScript
  def run!
    tech_data = {}

    each_faction do |faction, faction_name|
      tech_includes = faction.xpath("xml_include").map{|node| node['path']}.grep(/\Atechnology\//)
      # Rebel faction ("") has no technologies and it's ok
      # Other factions having no technologies are weird
      if tech_includes.empty? and faction_name != ""
        warn "No technology found for faction #{faction_name.inspect}"
        next
      end
      tech_includes.each do |tech_include|
        update_xml(xmldir+"/"+tech_include, "//ary[@type='techs']/techs") do |tech|
          name = tech["name"]
          status = tech["status"]
          binding.pry unless [0,2,4].include?(status.to_i)
          tech_data[name] ||= {}
          tech_data[name][faction_name] = status.to_i
          false
        end
      end
      false
    end

    tech_data.each do |name, data|
      human_status_i = data[human_player].to_i
      researched = data.select{|k,v| v == 0}.keys.sort
      available = data.select{|k,v| v == 2}.keys.sort
      if human_status_i == 0
        human_status = "research"
      elsif human_status_i == 2
        human_status = "available"
      elsif human_status_i == 4
        human_status = "not available"
      end
      # No point showing if nobody's anywhere near it
      next if researched.empty? and available.empty?
      puts "#{name} - #{human_status}:"
      puts "  have: #{ researched.join(", ") }"
      puts "  can research: #{ available.join(", ") }"
    end

    # Invert
    researched_by = {}
    available_to = { }
    tech_data.each do |name, data|
      data.each do |faction_name, status|
        if status == 0
          researched_by[faction_name] ||= []
          researched_by[faction_name] << name
        elsif status == 2
          available_to[faction_name] ||= []
          available_to[faction_name] << name
        end
      end
    end

    puts ""
    researched_by.map{|fn,d| [d.size, fn]}.sort.reverse.each do |score, faction_name|
      puts "#{score} #{faction_name}: #{ researched_by[faction_name].sort.map{|tn| researched_by[human_player].include?(tn) ? tn : Paint[tn.upcase, "green"]}.join(", ") }"
    end

    # Trades
    puts ""
    researched_by.map{|fn,d| [d.size, fn]}.sort.reverse.each do |score, faction_name|
      to_sell = (researched_by[faction_name] - researched_by[human_player]) & available_to[human_player]
      to_buy = (researched_by[human_player] - researched_by[faction_name]) & available_to[faction_name]
      next if to_sell.empty? and to_buy.empty?
      puts "#{faction_name}"
      puts "SELL: #{to_sell.join(", ")}" unless to_sell.empty?
      puts "BUY: #{to_buy.join(", ")}" unless to_buy.empty?
    end
  end
end

ListResearch.new

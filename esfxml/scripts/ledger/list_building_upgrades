#!/usr/bin/env ruby

require_relative "../esf_script"
require "json"
require "set"

class ListBuildingUpgrades < EsfScript
  AlreadyMaxLevel = [
    "artillery (6)",
    # "church protestant (3)", # this rules makes sense for protestants only (if I check country's religion, I could choose the right one)
    "culture (3; science)", # can be upgraded in capital
    "culture (4; science)", # only available in capital
    "farm corn (5)",
    "farm sheep (5)",
    "farm wheat (5)",
    "government (5)", # not outside capital
    "government (6)", # can be upgraded to unique one
    "government (7; france)",
    "government (7; sweden)",
    "government (7; maratha)",
    "government minor (4; civ)",
    "government minor (4; military)",
    "government minor (5; civ)", # 5 is only for captured minor capital
    # "inn (4)", # cannot be upgraded but can be replaced by something better
    "mine gems (2)",
    "mine gold (3)",
    "mine iron (3)",
    "mine silver (3)",
    "plantation coffee (3)",
    "plantation cotton (3)",
    "plantation fur (3)", # not completely plantation, but close enough
    "plantation spices (3)",
    "plantation sugar (4)", # the only one with extra level
    "plantation tea (3)",
    "plantation tobacco (3)",
    "port (4)",
    "rice (3)",
    "road (3)",
    "school (3)", # except in capital
    "school (4)",
    "timber (2)",
    "wine (3)",
  ].to_set

  PointlessUpgrades = [
    "farm corn (4)",
    "farm sheep (4)",
    "farm wheat (4)",
    "no fort (0)",
    "not yet",
  ].to_set

  def each_human_building_slot
    each_building_slot do |data|
      next unless data.delete(:owner) == human_player
      next if data[:constructing]
      next if AlreadyMaxLevel.include?(data[:building])
      next if PointlessUpgrades.include?(data[:building])
      yield(data)
    end
  end

  def call
    output = {}
    each_human_building_slot do |data|
      output[data[:building]] ||= []
      output[data[:building]] << data
    end
    output.sort.each do |type, entries|
      puts type
      puts entries.map{|e| e.merge(building: nil).compact.to_json}
      puts ""
    end
  end
end

ListBuildingUpgrades.new

#!/usr/bin/env ruby

require_relative "./db_schemata"

class DbTsvFile
  attr_reader :schema
  def parse_metadata!(metadata_line, table_name_from_dir)
    metadata = metadata_line.strip.sub(/\A"(.*)"(\s*,\s*)*\z/){$1}.split(/\s*,\s*/)
    raise "Metadata line unrecognized in #{@file_name}: #{metadata_line.inspect}" unless metadata.shift =~ /\Aversion\s+(\d+)/
    @version = $1.to_i
    @guid = nil

    if metadata[0] =~ /\Aschema\s+(\S+)/
      @table_name = $1
      metadata.shift
    else
      @table_name = table_name_from_dir
    end

    if metadata[0] =~ /\Aguid\s+(\S+)/
      @guid = $1
      metadata.shift
    else
      @guid = nil
    end

    if metadata[0] == "strict"
      @strict = true
      metadata.shift
    else
      @strict = false
    end

    if metadata == ["empty", "no schema"]
      @schema = nil
      @empty = true
      @data = []
      return
    elsif metadata != []
      raise "Metadata line unrecognized: #{metadata_line.inspect}"
    end
  end

  def initialize(file_name, table_name_from_dir)
    @file_name = file_name
    @fh = File.open(file_name, 'rb')
    parse_metadata!(@fh.readline.chomp, table_name_from_dir)

    if @strict
      @data = []
      require "rubygems"
      require "fastercsv"
      FCSV.new(@fh, :col_sep => ",").each{|row| @data << row}
    else
      @data = @fh.readlines.map{|line|
        line.sub(/\r?\n?\z/, "").split(/\t/)
      }
    end
    @fh.close

    labels = @data.shift
    @schema = DbSchemata.instance.get_schema(@table_name, @version, @guid)
  end

  def empty?
    @empty
  end

  def field_to_binary(field_type, field_value)
    case field_type
    when "boolean"
      if field_value == "true"
        "\x01".b
      elsif field_value == "false"
        "\x00".b
      else
        raise "Expected true/false, got #{field_value}"
      end
    when "float"
      # Works with any of: "123", "123.4", "123,4"
      [field_value.gsub('"', '').sub(",", ".").to_f].pack("f")
    when "int"
      [field_value.gsub('"', '').to_i].pack("l")
    when "short"
      [field_value.gsub('"', '').to_i].pack("v")
    when "string"
      if field_value =~ /\A".*"\z/
        str = eval(field_value).unpack("U*")
      else
        str = field_value.unpack("U*")
      end
      [str.size].pack("v") + str.pack("v*")
    when "optstring"
      str = eval(field_value)
      if str.nil?
        "\x00"
      else
        str = str.unpack("U*")
        "\x01" + [str.size].pack("v") + str.pack("v*")
      end
    when /\Ablob:(\d+)/
      bloblen = $1.to_i
      str = eval(field_value)
      raise "Blob expected to have #{bloblen} bytes, had #{str.size}" unless str.size == bloblen
      str
    else
      warn "Unknown ft/fv #{field_type} #{field_value}"
      "x"
    end
  end

  def row_to_binary(row)
    raise "Expected #{@schema.size} elements in row, got #{row.size}" unless @schema.size == row.size
    out = ""
    row.size.times{|i|
      out << field_to_binary(@schema[i][1], row[i])
    }
    out
  end

  def guid_to_binary
    if @guid
      guid_str = @guid.unpack("U*")
      "\375\376\374\377".b + [guid_str.size].pack("v") + guid_str.pack("v*")
    else
      ""
    end
  end

  def version_to_binary
    if @version == 1
      "\x01"
    else
      "\374\375\376\377".b + [@version-1].pack("C") + "\000\000\000\001".b
    end
  end

  def to_binary
    out = guid_to_binary + version_to_binary
    out << [@data.size].pack("V")
    @data.each{|row|
      out << row_to_binary(row)
    }
    out
  end
end

def parse_argv
  # There args are only for db_unpack compatibility
  # Comma mode doesn't actually do anything here, it works either way
  # Strict doesn't do anything either, it's encoded in first line of metadata
  ARGV.shift while ARGV[0] == '--strict' or ARGV[0] == '--comma'

  unless ARGV.size == 2
    STDERR.puts "Usage: #{$0} [--comma] [--strict] input/ output/"
  end

  [Pathname(ARGV[0]), Pathname(ARGV[1])]
end

schemata = DbSchemata.new
source, target = parse_argv

sources = []
source.find{|file_name| sources << file_name if file_name.file?}

sources.sort.each do |file_name|
  next unless file_name.to_s =~ /\.[tc]sv\z/ # .DS_Store and other nonsense
  table_name = file_name.dirname.basename.to_s
  current_target = Pathname((target+file_name.relative_path_from(source)).to_s.sub(/\.[tc]sv\z/, ""))

  file = DbTsvFile.new(file_name, table_name)
  unless file.schema or file.empty?
    STDERR.puts "No schema known for #{file_name}, skipping"
    next
  end
  file_bin = file.to_binary
  FileUtils.mkdir_p current_target.dirname
  File.write(current_target, file_bin)
end
